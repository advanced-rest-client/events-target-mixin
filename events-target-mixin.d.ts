/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   events-target-mixin.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {dedupingMixin} from '@polymer/polymer/lib/utils/mixin.js';

export {EventsTargetMixin};


/**
 * `ArcBehaviors.EventsTargetBehavior` is a behavior mixin that allows setting
 * up event listeners on a default or set node.
 *
 * By default the element listens on the `window` element for events. By setting
 * `eventsTarget` property on this element it removes all previously set
 * listeners and adds the same listeners to the node.
 * It also restores default state when the `eventsTarget` is removed.
 *
 * Implementations should implement two abstract methods:
 * `_attachListeners(node)` and `_detachListeners(node)`. Both of them will be
 * called with event target argument when it's required to either set or remove
 * listeners.
 *
 * ### Example (Polymer 2.x)
 *
 * ```javascript
 * class EventableElement extends ArcBehaviors.EventsTargetBehavior(Polymer.Element) {
 *  static get is() {
 *    return 'eventable-element';
 *  }
 *   _attachListeners: function(node) {
 *    mode.addEventListener('event', this._callback);
 *  }
 *
 *  _detachListeners: function(node) {
 *    mode.removeEventListener('event', this._callback);
 *  }
 * }
 * ```
 *
 * The mixin handles connectedCallback / disconnectedCallback and calls the
 * functions with required parameters.
 */
declare function EventsTargetMixin<T extends new (...args: any[]) => {}>(base: T): T & EventsTargetMixinConstructor;

interface EventsTargetMixinConstructor {
  new(...args: any[]): EventsTargetMixin;
}

export {EventsTargetMixinConstructor};

interface EventsTargetMixin {

  /**
   * Events handlers target. By default the element listens on
   * `window` object. If set, all events listeners will be attached to this
   * object instead of `window`.
   */
  eventsTarget: object|null|undefined;

  /**
   * An event target used to attach listeners.
   */
  _oldEventsTarget: object|null|undefined;
  connectedCallback(): void;
  disconnectedCallback(): void;

  /**
   * Removes old handlers (if any) and attaches listeners on new event
   * event target.
   *
   * @param eventsTarget Event target to set handlers on. If not set it
   * will set handlers on the `window` object.
   */
  _eventsTargetChanged(eventsTarget: Node|null): void;

  /**
   * To be implement by the element to set event listeners on the target
   */
  _attachListeners(): void;

  /**
   * To be implement by the element to remove event listeners from the target
   */
  _detachListeners(): void;
}
